# Detect platform
UNAME_S := $(shell uname -s)

# Compiler
ifeq ($(UNAME_S),Darwin)
    CXX = clang++
else
    CXX = g++
endif

# Base compiler flags
CXXFLAGS = \
  -g \
	-Wall \
	-Wextra \
	-std=c++17 \
	`sdl2-config --cflags` \
	-I../firmware/src/Emulator \
	-I../firmware/src/AudioOutput \
	-I../firmware/src/Emulator/z80 \
	-I../firmware/src/TZX \
	-I../firmware/src \
	-D__DESKTOP__

# Platform-specific flags
ifeq ($(UNAME_S),Darwin)
    # macOS
    CXXFLAGS += -I/opt/homebrew/Cellar/sdl2/2.30.8/include
    LDFLAGS = -L/usr/local/lib -framework Cocoa
endif

ifeq ($(UNAME_S),Linux)
    # Linux
    CXXFLAGS += `pkg-config --cflags gtk+-3.0`
    LDFLAGS = `pkg-config --libs gtk+-3.0`
endif

# Target executable name
TARGET = zx_emulator

SRCS = \
  ../firmware/src/Emulator/128k_rom.cpp \
  ../firmware/src/Emulator/48k_rom.cpp \
  ../firmware/src/Emulator/spectrum.cpp \
  ../firmware/src/Emulator/z80/z80.cpp \
	../firmware/src/Emulator/snaps.cpp \
  ../firmware/src/AYSound/AySound.cpp \
	../firmware/src/Serial.cpp \
	../firmware/src/TZX/tzx_cas.cpp \
	src/loadgame.cpp

OBJC_SRCS = \
	src/main.mm

# Object files (object files will have the same path as source files, but with .o extension)
OBJS = $(SRCS:.cpp=.o) $(OBJC_SRCS:.mm=.o)

# Dependency files
DEPS = $(OBJS:.o=.d)

# Default rule
all: $(TARGET)

# Create executable from object files
$(TARGET): $(OBJS) Makefile.emu
	$(CXX) $(CXXFLAGS) -o $(TARGET) $(OBJS) `sdl2-config --libs` $(LDFLAGS)

# Object file rules (object files are placed next to the source files)
%.o: %.cpp Makefile.emu
	$(CXX) $(CXXFLAGS) -MMD -c $< -o $@

# Rules for .mm files (for Objective-C++ on macOS, C++ on Linux)
%.o: %.mm Makefile.emu
ifeq ($(UNAME_S),Darwin)
	$(CXX) $(CXXFLAGS) -MMD -c $< -o $@
else
	$(CXX) $(CXXFLAGS) -MMD -x c++ -c $< -o $@
endif

# Include dependency files
-include $(DEPS)

# Clean up build files
clean:
	rm -f $(SRCS:.cpp=.o) $(SRCS:.cpp=.d) $(OBJC_SRCS:.mm=.o) $(OBJC_SRCS:.mm=.d) $(TARGET)

# Phony targets
.PHONY: all clean
